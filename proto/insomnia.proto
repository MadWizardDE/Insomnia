syntax = "proto3";

package MadWizard.Insomnia.Remote;

// import "test.proto";

service InsomniaService {
	rpc QuerySystemInfo (SystemRequest) returns (SystemInfo);
	rpc ChangeSystemState (SystemStateRequest) returns (SystemInfo);
	rpc StopSystem (SystemStopRequest) returns (ServiceResponse);

	rpc ListUserSessions (UserSessionListRequest) returns (UserSessionList);
	rpc StartUserSession (UserSessionStartRequest) returns (UserSessionInfo);
	rpc QueryUserSessionInfo (UserSessionRequest) returns (UserSessionInfo);
	rpc ChangeUserSessionState (UserSessionStateRequest) returns (UserSessionInfo);
	rpc StopUserSession (UserSessionStopRequest) returns (UserSessionInfo);

	rpc ListUserProcesses (UserProcessListRequest) returns (UserProcessList);
	rpc StartUserProcess (StartUserProcessRequest) returns (UserProcessInfo);
	rpc StopUserProcess (StopUserProcessRequest) returns (UserProcessInfo);
}

message SystemInfo {
	enum State {
		UNKNOWN = 0;

		RUNNING = 1;

		SLEEP = 11;
		HIBERNATE = 12;
	}

	State state = 1;

}

message UserSessionInfo {
	enum State {
		UNKNOWN = 0;

		CONSOLE_CONNECTED = 1;
		REMOTE_CONNECTED = 2;

		DISCONNECTED = 5;
	}

	int32 sessionID = 1;
	string name = 2;

	State state = 3;

	oneof locked {
		bool lockedUnkown = 4;
		bool lockedKnown = 5;
	}
}

message UserProcessInfo {
	int32 sessionID = 1;
	int32 processID = 2;
	string name = 3;
}

message UserCredentials {
	string userName = 1;
	string userPassword = 2;
}

message ServiceResponse { }

// --- System-Messages --- //

message SystemRequest {

}

message SystemStateRequest {
	SystemInfo.State state = 1;
}

message SystemStopRequest {
	bool forced = 1;
}

// --- UserSession-Messages --- //

message UserSessionListRequest {

}

message UserSessionList {
	repeated UserSessionInfo sessions = 1;
}

message UserSessionRequest {
	int32 sessionID = 1;
}

message UserSessionStartRequest {
	UserCredentials credentials = 1;

	UserSessionInfo.State state = 2;
	bool locked = 3;
}

message UserSessionStateRequest {
	int32 sessionID = 1;

	UserSessionInfo.State state = 2;
	bool locked = 3;
}

message UserSessionStopRequest {
	int32 sessionID = 1;
	bool forced = 2;
}

// --- UserProcess-Messages --- //

message UserProcessListRequest {
	int32 sessionID = 1;
}

message UserProcessList {
	repeated UserProcessInfo processes = 1;
}

message StartUserProcessRequest {
	int32 sessionID = 1;

	oneof image {
		string path = 2;
		bytes data = 3;
	}

	oneof user {
		bool auto = 4;
		bool system = 5;
		UserCredentials credentials = 6;
	}
}

message StopUserProcessRequest {
	int32 processID = 1;

	bool forced = 2;
}