; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

;#pragma include __INCLUDE__ + ";" + ReadReg(HKLM, "Software\Mitrich Software\Inno Download Plugin", "InstallDir")


#define MyAppId "{B5C0DEEA-FFF1-49B8-B923-4E680E4A552D}"
#define MyAppName "Insomnia"
#define MyAppVersion "2.0.0-alpha2"
#define MyAppPublisher "MadWizardDE"
#define MyAppURL "https://madwizard.de/"

;#include <idp.iss>

#include "functions.iss"
#include "dependencies/installer.iss"
#include "settings/SystemSessionMonitor.iss"
#include "settings/NetworkMonitor.iss"
#include "settings/DuoStreamMonitor.iss"
#include "settings/NetworkSessionMonitor.iss"
#include "settings/PowerRequestMonitor.iss"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{#MyAppId}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppVerName={#MyAppName}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
DefaultGroupName={#MyAppName}
AllowNoIcons=yes
; Uncomment the following line to run in non administrative install mode (install for current user only).
;PrivilegesRequired=lowest
OutputBaseFilename=Insomnia_v{#MyAppVersion}
SolidCompression=yes
WizardStyle=classic
SetupIconFile=..\InsomniaService\Properties\moon.ico
AppModifyPath="{commonappdata}\{#MyAppName}\Installer\setup.exe" /modify=1
UninstallDisplayIcon={app}\InsomniaService.exe
DisableProgramGroupPage=yes
DisableWelcomePage=no
ArchitecturesInstallIn64BitMode=x64compatible
WizardImageFile=resources\Insomnia.bmp

[Types]
Name: "duo"; Description: "DuoStream installation"; Check: IsDuoInstalled
Name: "full"; Description: "Full installation"
Name: "minimal"; Description: "Minimal installation"
Name: "server"; Description: "Server installation"
Name: "custom"; Description: "Custom installation"; Flags: iscustom


[Components]
Name: "InsomniaService"; Description: "Insomnia Service"; Types: full minimal duo server custom; Flags: fixed
Name: "InsomniaService\NetworkMonitor"; Description: "Network Monitoring"; Types: full server custom; Flags: disablenouninstallwarning; Check: not IsArm64
Name: "plugins"; Description: "Additional Features"; Types: full custom; Flags: disablenouninstallwarning; Check: IsDuoInstalled or IsBridgeReady
Name: "plugins\DuoStreamIntegration"; Description: "DuoStream Integration"; Types: full duo custom; Flags: disablenouninstallwarning; Check: IsDuoInstalled
Name: "plugins\InsomniaServiceBridge"; Description: "Interactive Taskbar Icon"; Types: full custom; Flags: disablenouninstallwarning; Check: IsBridgeReady


[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
; Enables full Unicode-Support in INI-File
Source: "resources\prefs.ini"; DestDir: "{app}\config";

Source: "resources\GetNetworkInterfaces.ps1"; Flags: dontcopy noencryption
Source: "resources\network.ico"; Flags: dontcopy noencryption

Source: "..\InsomniaService\bin\Release\net8.0-windows8.0\publish\*"; DestDir: "{app}";  Components: InsomniaService; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "..\plugins\DuoStreamIntegration\bin\Release\net8.0-windows8.0\publish\*"; DestDir: "{app}\plugins\DuoStreamIntegration"; Components: plugins\DuoStreamIntegration; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "..\plugins\InsomniaServiceSessionBridge\InsomniaServiceBridge\bin\Release\net8.0-windows8.0\publish\*"; DestDir: "{app}\plugins\InsomniaServiceBridge"; Components: plugins\InsomniaServiceBridge; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "..\plugins\InsomniaServiceSessionBridge\InsomniaSessionMinion\bin\Release\*"; DestDir: "{app}\plugins\InsomniaServiceBridge\minion"; Components: plugins\InsomniaServiceBridge; Flags: ignoreversion recursesubdirs createallsubdirs

; Source: "Helper\bin\x86\Debug\Helper.dll"; Flags: dontcopy

[INI]
Filename: {app}\config\prefs.ini; Section: SystemMonitor; Key: timeout; String: {code:SystemMonitorPrefs|Timeout}; Check: ShouldConfigureSystemMonitor
Filename: {app}\config\prefs.ini; Section: SystemMonitor; Key: idle; String: {code:SystemMonitorPrefs|IdleAction}; Check: ShouldConfigureSystemMonitor
Filename: {app}\config\prefs.ini; Section: SystemMonitor; Key: usage; String: {code:SystemMonitorPrefs|UsageAction}; Check: ShouldConfigureSystemMonitor

Filename: {app}\config\prefs.ini; Section: SessionMonitor; Key: track; String: {code:SessionMonitorPrefs|Track}; Check: ShouldConfigureSessionMonitor
Filename: {app}\config\prefs.ini; Section: SessionMonitor; Key: allowSleepControl; String: {code:SessionMonitorPrefs|AllowSleepControl}; Check: ShouldConfigureSleepControl

Filename: {app}\config\prefs.ini; Section: DuoStreamMonitor; Key: idle; String: {code:DuoStreamMonitorPrefs|IdleAction}; Check: ShouldConfigureDuoStreamMonitor
Filename: {app}\config\prefs.ini; Section: DuoStreamMonitor; Key: demand; String: {code:DuoStreamMonitorPrefs|DemandAction}; Check: ShouldConfigureDuoStreamMonitor

Filename: {app}\config\prefs.ini; Section: NetworkMonitor; Key: interface; String: {code:NetworkMonitorPrefs|Interface}; Check: ShouldConfigureNetworkMonitor
Filename: {app}\config\prefs.ini; Section: NetworkMonitor; Key: name; String: {code:NetworkMonitorPrefs|InterfaceName}; Check: ShouldConfigureNetworkMonitor

Filename: {app}\config\prefs.ini; Section: NetworkSessionMonitor; Key: track; String: {code:NetworkSessionMonitorPrefs|Track}; Check: ShouldConfigureNetworkSessionMonitor
Filename: {app}\config\prefs.ini; Section: PowerRequestMonitor; Key: track; String: {code:PowerRequestMonitorPrefs|Track}; Check: ShouldConfigurePowerRequestMonitor


; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[InstallDelete]
Type: filesandordirs; Name: "{app}\plugins\DuoStreamIntegration"; Check: not WizardIsComponentSelected('plugins\DuoStreamIntegration')
Type: filesandordirs; Name: "{app}\plugins\InsomniaServiceBridge"; Check: not WizardIsComponentSelected('plugins\InsomniaServiceBridge')

[Run]
Filename: "sc.exe"; \
  Parameters: "create InsomniaService binPath= ""{app}\InsomniaService.exe"" start= delayed-auto displayname= Insomnia"; \
  StatusMsg: "Registering Windows service..."; \
  Flags: runhidden waituntilterminated
  
Filename: "sc.exe"; \
  Parameters: "description InsomniaService ""Monitors the resource usage of the system to allow fine-grained control of sleep cycles and trigger events."" "; \
  StatusMsg: "Registering Windows service..."; \
  Flags: runhidden waituntilterminated  

Filename: "sc.exe"; \
  Parameters: "failure InsomniaService reset= 0 actions= restart/60000/restart/60000/restart/60000"; \
  StatusMsg: "Registering Windows service..."; \
  Flags: runhidden waituntilterminated

Filename: "sc.exe"; \
  Parameters: "failureflag InsomniaService 1"; \
  StatusMsg: "Registering Windows service..."; \
  Flags: runhidden waituntilterminated

  
Filename: "{app}\InsomniaService.exe"; \
  Parameters: "config init ""{app}\config\prefs.ini"""; \
  StatusMsg: "Configuring Insomnia..."; \
  Flags: runhidden waituntilterminated; \
  Check: ShouldConfigureInsomnia
  
// Post Installation Checkboxes //

Filename: "{app}\config\config.xml"; \
  Verb: "edit"; \
  Description: "Edit configuration"; \
  Flags: postinstall shellexec skipifsilent
  
Filename: "net"; \
  Parameters: "start InsomniaService"; \
  Description: "Start service"; \
  Flags: runhidden waituntilterminated postinstall runascurrentuser


[UninstallRun]
Filename: "net"; \
  Parameters: "stop InsomniaService"; Flags: runhidden waituntilterminated

Filename: "sc.exe"; \
  Parameters: "delete InsomniaService"; \
  Flags: runhidden waituntilterminated

[UninstallDelete]
Type: files; Name: "{app}\config\prefs.ini";
Type: filesandordirs; Name: "{app}\logs";
Type: filesandordirs; Name: "{commonappdata}\{#MyAppName}\Installer";


[Code]
var
  HasReadConfigFile: Boolean;
  DeleteConfigFiles: Boolean; 
  
function InitializeSetup: Boolean;
begin
  IsReinstall := RegKeyExists(HKEY_LOCAL_MACHINE, UninstallKey);

  HasReadConfigFile := False;
  
  Result := True;
end;

procedure VersionLabelOnLinkClick(Sender: TObject; const Link: string; LinkType: TSysLinkType);
var
  ErrorCode: Integer;
begin
  ShellExecAsOriginalUser('open', Link, '', '', SW_SHOWNORMAL, ewNoWait, ErrorCode);
end;

procedure CreateVersionLabel();
var
  DummyLabel: TLabel;
  VersionLabel: TNewLinkLabel;
begin
  DummyLabel := TLabel.Create(WizardForm);
  DummyLabel.Caption := 'Version';
  VersionLabel := TNewLinkLabel.Create(WizardForm);
  //VersionLabel.Caption := 'Version {#MyAppVersion}';
  VersionLabel.Caption := 'Version <a href="https://github.com/MadWizardDE/Insomnia/releases/tag/v{#MyAppVersion}">{#MyAppVersion}</a>';
  //VersionLabel.Font.Color := clGreen;
  //VersionLabel.Font.Style := fsBold;

  VersionLabel.Left := ScaleX(10);
  VersionLabel.Top := WizardForm.CancelButton.Top + (WizardForm.CancelButton.Height / 2) - (DummyLabel.Height / 2)
  VersionLabel.Anchors := [akLeft, akBottom];
  //VersionLabel.Enabled := False;
  VersionLabel.OnLinkClick := @VersionLabelOnLinkClick;

  VersionLabel.UseVisualStyle := False;

  VersionLabel.Parent := WizardForm;
end;


procedure InitializeWizard();
begin
  RemoveAboutMenu
  
  CreateVersionLabel;
  
  SettingsPage := CreateSettingsPage(wpSelectComponents);
  DuoSettingsPage := CreateDuoSettingsPage(SettingsPage.ID);
  NetworkSettingsPage := CreateNetworkSettingsPage(DuoSettingsPage.ID);
  
  RefreshNetworkInterfaces
end;

<event('CurPageChanged')>
procedure AfterPageChanged(CurPageID: Integer);
begin
  if CurPageID = wpSelectComponents then
    if IsReinstall and HasExistingConfig() and not HasReadConfigFile then
      HasReadConfigFile := ReadExistingConfig;
end;

<event('CurStepChanged')>
procedure PostInstallSetup(CurStep: TSetupStep);
begin
  if CurStep = ssPostInstall then
  begin
    AddUninstallerArguments('/SILENT /CONTROLPANEL');
    CopyInstallerTo(ExpandConstant('{commonappdata}\{#MyAppName}\Installer\setup.exe'))
  end;
end;

// --- Uninstaller Logic --- //

function InitializeUninstall(): Boolean;
begin
  DeleteConfigFiles := False;
  Result := True;

  case SuppressibleTaskDialogMsgBox(
      'Insomnia is going to be uninstalled.',
      'Please decide whether to keep your configuration files or not.',   
      mbConfirmation,
      MB_YESNOCANCEL, ['Keep configuration files', 'Delete everything'],
      0, IDYES)
  of
    IDYES:    Result := True;
    IDNO:     DeleteConfigFiles := True;
    IDCANCEL: Result := False;
  end;
end;

<event('CurUninstallStepChanged')>
procedure PostUninstallSetup(CurUninstallStep: TUninstallStep);
begin
  if CurUninstallStep = usUninstall then
  begin
    if DeleteConfigFiles = True then
      DelTree(ExpandConstant('{app}\config'), True, True, True);
  end;
end;

